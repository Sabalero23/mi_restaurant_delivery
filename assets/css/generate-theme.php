<?php
/**
 * Generador de CSS dinámico para temas
 * assets/css/generate-theme.php
 * 
 * Este archivo genera CSS dinámico basado en la configuración de temas
 * almacenada en la base de datos.
 */

// Configurar headers para CSS
header('Content-Type: text/css; charset=utf-8');
header('Cache-Control: max-age=3600'); // Cache por 1 hora
header('Pragma: public');

// Configurar codificación para evitar problemas de caracteres
ini_set('default_charset', 'UTF-8');

// Prevenir output de errores en el CSS
error_reporting(0);
ini_set('display_errors', 0);

// Incluir archivos necesarios
try {
    $config_path = realpath(__DIR__ . '/../../config/');
    
    if (!$config_path || !file_exists($config_path . '/config.php')) {
        throw new Exception('Archivos de configuración no encontrados');
    }
    
    require_once $config_path . '/config.php';
    require_once $config_path . '/database.php';
    
    // Verificar si existe theme.php, si no, usar fallback
    $theme_file = $config_path . '/theme.php';
    if (!file_exists($theme_file)) {
        createBasicThemeFile($theme_file);
    }
    
    require_once $theme_file;
    
} catch (Exception $e) {
    // Si hay error cargando archivos, usar CSS básico
    echo generateFallbackCSS();
    exit;
}

try {
    // Crear conexión a base de datos
    $database = new Database();
    $db = $database->getConnection();
    
    // Configurar charset UTF-8 para la conexión
    if ($db) {
        $db->exec("SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci");
    }
    
    // Obtener el manager de temas
    $theme_manager = new ThemeManager($db);
    
    // Verificar si hay parámetro de depuración
    $debug = isset($_GET['debug']) && $_GET['debug'] === '1';
    
    if ($debug) {
        // Modo debug: mostrar información adicional
        echo "/* Debug mode enabled */\n";
        echo "/* Generated at: " . date('Y-m-d H:i:s') . " */\n";
        echo "/* Database connection: " . ($db ? 'OK' : 'FAILED') . " */\n\n";
    }
    
    // Generar y mostrar el CSS
    $css = $theme_manager->generateCSS();
    
    // Agregar comentarios de identificación
    echo "/* Theme CSS Generated by Restaurant Management System */\n";
    echo "/* Generated: " . date('c') . " */\n\n";
    
    echo $css;
    
} catch (PDOException $e) {
    // Error de base de datos - usar tema por defecto
    error_log("Database error in generate-theme.php: " . $e->getMessage());
    
    $theme_manager = new ThemeManager(null);
    echo "/* Database connection failed - using default theme */\n";
    echo $theme_manager->generateCSS();
    
} catch (Exception $e) {
    // Cualquier otro error - usar CSS de emergencia
    error_log("General error in generate-theme.php: " . $e->getMessage());
    
    echo "/* Error occurred - using fallback CSS */\n";
    echo generateFallbackCSS();
}

/**
 * Crear archivo theme.php básico si no existe
 */
function createBasicThemeFile($theme_file) {
    $basic_theme_content = '<?php
/**
 * Clase ThemeManager básica de respaldo
 * Generada automáticamente por generate-theme.php
 */
class ThemeManager {
    private $settings;
    private $db;
    
    public function __construct($database = null) {
        $this->db = $database;
        $this->settings = $this->getThemeSettings();
    }
    
    public function getThemeSettings() {
        if ($this->db) {
            try {
                $query = "SELECT setting_key, setting_value FROM theme_settings";
                $stmt = $this->db->prepare($query);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                $theme = [];
                foreach ($results as $row) {
                    $theme[$row["setting_key"]] = $row["setting_value"];
                }
                
                // Combinar con valores por defecto
                return array_merge($this->getDefaultTheme(), $theme);
            } catch (Exception $e) {
                return $this->getDefaultTheme();
            }
        }
        
        return $this->getDefaultTheme();
    }
    
    public function getDefaultTheme() {
        return [
            "primary_color" => "#667eea",
            "secondary_color" => "#764ba2", 
            "accent_color" => "#ff6b6b",
            "success_color" => "#28a745",
            "warning_color" => "#ffc107",
            "danger_color" => "#dc3545",
            "info_color" => "#17a2b8",
            "dark_color" => "#343a40",
            "light_color" => "#f8f9fa",
            "text_primary" => "#212529",
            "text_secondary" => "#6c757d",
            "text_muted" => "#868e96",
            "text_white" => "#ffffff",
            "bg_body" => "#f8f9fa",
            "bg_white" => "#ffffff",
            "bg_light" => "#f8f9fa",
            "bg_dark" => "#343a40",
            "font_family_primary" => "\'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif",
            "font_size_base" => "16px",
            "font_size_small" => "14px",
            "font_size_large" => "18px",
            "border_radius_base" => "8px",
            "border_radius_large" => "15px",
            "sidebar_width" => "280px",
            "shadow_base" => "0 5px 15px rgba(0, 0, 0, 0.08)",
            "transition_base" => "0.3s ease"
        ];
    }
    
    public function updateTheme($new_settings) {
        if (!$this->db) {
            return ["success" => false, "message" => "Base de datos no disponible"];
        }
        
        try {
            foreach ($new_settings as $key => $value) {
                $query = "INSERT INTO theme_settings (setting_key, setting_value, updated_at) 
                         VALUES (?, ?, NOW()) 
                         ON DUPLICATE KEY UPDATE setting_value = ?, updated_at = NOW()";
                $stmt = $this->db->prepare($query);
                $stmt->execute([$key, $value, $value]);
            }
            
            return ["success" => true, "message" => "Configuración actualizada correctamente"];
        } catch (Exception $e) {
            return ["success" => false, "message" => "Error: " . $e->getMessage()];
        }
    }
    
    public function getPresetThemes() {
        return [
            "default" => [
                "name" => "Predeterminado", 
                "primary_color" => "#667eea", 
                "secondary_color" => "#764ba2", 
                "accent_color" => "#ff6b6b"
            ],
            "dark" => [
                "name" => "Oscuro", 
                "primary_color" => "#343a40", 
                "secondary_color" => "#495057", 
                "accent_color" => "#fd7e14"
            ],
            "green" => [
                "name" => "Verde", 
                "primary_color" => "#28a745", 
                "secondary_color" => "#20c997", 
                "accent_color" => "#17a2b8"
            ]
        ];
    }
    
    public function generateCSS() {
        $theme = $this->settings;
        
        $css = ":root {\n";
        foreach ($theme as $key => $value) {
            $css_var = "--" . str_replace("_", "-", $key);
            $css .= "    {$css_var}: {$value};\n";
        }
        $css .= "}\n\n";
        
        $css .= $this->getBaseCSS();
        
        return $css;
    }
    
    private function getBaseCSS() {
        return "
/* CSS Base Generado Dinámicamente */
body {
    font-family: var(--font-family-primary);
    font-size: var(--font-size-base);
    background: var(--bg-body);
    color: var(--text-primary);
    line-height: 1.6;
    margin: 0;
    padding: 0;
}

.card {
    background: var(--bg-white) !important;
    color: var(--text-primary) !important;
    border: none;
    border-radius: var(--border-radius-large);
    box-shadow: var(--shadow-base);
    overflow: hidden;
    transition: var(--transition-base);
}

.card-header {
    background: var(--bg-light) !important;
    color: var(--text-primary) !important;
    border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    padding: 1.5rem;
}

.card-body {
    background: var(--bg-white) !important;
    color: var(--text-primary) !important;
    padding: 1.5rem;
}

.btn-primary {
    background: var(--primary-color) !important;
    border-color: var(--primary-color) !important;
    color: var(--text-white) !important;
}

.btn-success {
    background: var(--success-color) !important;
    border-color: var(--success-color) !important;
    color: var(--text-white) !important;
}

.text-primary { color: var(--primary-color) !important; }
.text-success { color: var(--success-color) !important; }
.text-danger { color: var(--danger-color) !important; }
.text-muted { color: var(--text-muted) !important; }

.sidebar {
    width: var(--sidebar-width);
    background: linear-gradient(180deg, var(--primary-color) 0%, var(--secondary-color) 100%);
}

.alert-success {
    background: rgba(40, 167, 69, 0.1) !important;
    color: var(--success-color) !important;
    border-left: 4px solid var(--success-color);
}

.alert-danger {
    background: rgba(220, 53, 69, 0.1) !important;
    color: var(--danger-color) !important;
    border-left: 4px solid var(--danger-color);
}
        ";
    }
}
?>';

    // Crear directorio si no existe
    $dir = dirname($theme_file);
    if (!file_exists($dir)) {
        mkdir($dir, 0755, true);
    }
    
    file_put_contents($theme_file, $basic_theme_content);
}

/**
 * CSS de emergencia cuando todo falla
 */
function generateFallbackCSS() {
    return '
/* CSS de Emergencia - Sistema de Temas */
:root {
    --primary-color: #667eea;
    --secondary-color: #764ba2;
    --accent-color: #ff6b6b;
    --success-color: #28a745;
    --warning-color: #ffc107;
    --danger-color: #dc3545;
    --info-color: #17a2b8;
    --text-primary: #212529;
    --text-secondary: #6c757d;
    --text-muted: #868e96;
    --text-white: #ffffff;
    --bg-body: #f8f9fa;
    --bg-white: #ffffff;
    --bg-light: #f8f9fa;
    --font-family-primary: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    --font-size-base: 16px;
    --border-radius-large: 15px;
    --shadow-base: 0 5px 15px rgba(0, 0, 0, 0.08);
    --sidebar-width: 280px;
    --transition-base: 0.3s ease;
}

body {
    font-family: var(--font-family-primary);
    font-size: var(--font-size-base);
    background: var(--bg-body);
    color: var(--text-primary);
    margin: 0;
    padding: 0;
    line-height: 1.6;
}

.card {
    background: var(--bg-white) !important;
    color: var(--text-primary) !important;
    border: none;
    border-radius: var(--border-radius-large);
    box-shadow: var(--shadow-base);
    margin-bottom: 1rem;
}

.card-header {
    background: var(--bg-light) !important;
    color: var(--text-primary) !important;
    padding: 1.5rem;
    border-bottom: 1px solid #dee2e6;
}

.card-body {
    background: var(--bg-white) !important;
    color: var(--text-primary) !important;
    padding: 1.5rem;
}

.btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    text-decoration: none;
    text-align: center;
    cursor: pointer;
    transition: var(--transition-base);
    font-weight: 500;
}

.btn-primary {
    background: var(--primary-color) !important;
    color: var(--text-white) !important;
}

.btn-success {
    background: var(--success-color) !important;
    color: var(--text-white) !important;
}

.btn-danger {
    background: var(--danger-color) !important;
    color: var(--text-white) !important;
}

.text-primary { color: var(--primary-color) !important; }
.text-success { color: var(--success-color) !important; }
.text-danger { color: var(--danger-color) !important; }
.text-muted { color: var(--text-muted) !important; }

.alert {
    padding: 1rem 1.5rem;
    border-radius: 8px;
    border: none;
    margin-bottom: 1rem;
}

.alert-success {
    background: rgba(40, 167, 69, 0.1) !important;
    color: var(--success-color) !important;
    border-left: 4px solid var(--success-color);
}

.alert-danger {
    background: rgba(220, 53, 69, 0.1) !important;
    color: var(--danger-color) !important;
    border-left: 4px solid var(--danger-color);
}

.sidebar {
    width: var(--sidebar-width);
    background: linear-gradient(180deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    color: var(--text-white);
}

.form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    background: var(--bg-white) !important;
    color: var(--text-primary) !important;
    transition: var(--transition-base);
}

.form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    outline: none;
}

/* Responsive */
@media (max-width: 991.98px) {
    .sidebar {
        width: 100%;
        max-width: 350px;
    }
}
';
}

/**
 * Función de utilidad para registrar errores de forma segura
 */
function safeErrorLog($message) {
    if (function_exists('error_log')) {
        error_log("[Theme CSS] " . $message);
    }
}

// Agregar header de expiración
$expires = gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT';
header("Expires: $expires");

?>